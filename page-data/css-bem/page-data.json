{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/css-bem/",
    "result": {"data":{"cur":{"id":"fd530d3d-23dc-5ffa-b65e-6f82056a678b","html":"<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<blockquote>\n<ul>\n<li>css 클래스 이름 짓는 방법론</li>\n</ul>\n</blockquote>\n<h2 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h2>\n<blockquote>\n<ul>\n<li>css 명시도 (specificiy)를 높여서 요소에 적용되는 스타일이 충돌하지 않도록 하는 css 아이디와 클래스를 naming하는 방법론이다</li>\n<li>기본적으로 아이디는 사용하지 않고 클래스만 사용함</li>\n<li>OOCSS, Atomic 등 다른 naming 방법론도 있는데 BEM이 그나마 복잡하지 않음</li>\n<li>클래스를 Block(독립 적인 요소), Element(block을 구성하는 단위), Modifier로 구분함\n<ul>\n<li>일반적으로 적는 클래스 이름은 block</li>\n<li>element인 경우 block__element</li>\n<li>modifier인 경우 block__element—modifier\n<ul>\n<li>예.\n<ul>\n<li>.header => block</li>\n<li>.header__navigation => element</li>\n<li>.header__navigation—navi-text => modifier</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"장단점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장,단점</h2>\n<blockquote>\n<ul>\n<li>장점:\n<ul>\n<li>모듈화 (클래스에 적용되는 css가 서로에게 영향을 주지 않음): block style이 다른 element 스타일의 inheritance 영향을 받지 않음</li>\n<li>재사용성 가능한 css 코드가 만들어짐</li>\n<li>읽기 좋은 구조로 인한 가독성</li>\n</ul>\n</li>\n<li>단점:\n<ul>\n<li>클래스 이름이 끝도 없이 길어져 가독성을 해칠 수 있음</li>\n<li>BEM 을 사용안하는 스타일 프레임워크를 사용하면 코드 일관성 유지가 되지 않음</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"팁\" style=\"position:relative;\"><a href=\"#%ED%8C%81\" aria-label=\"팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁</h2>\n<blockquote>\n<ul>\n<li>React에서는 스타일링할때 module이나 css-in-js(styled-components) 사용하면 고유의 클래스 이름이 생성되기 때문에 BEM 신경 안써도됨</li>\n</ul>\n</blockquote>\n<h1 id=\"끝\" style=\"position:relative;\"><a href=\"#%EB%81%9D\" aria-label=\"끝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝</h1>\n<p>😊</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n<li><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></li>\n<li><a href=\"#%EC%9E%A5%EB%8B%A8%EC%A0%90\">장,단점</a></li>\n<li><a href=\"#%ED%8C%81\">팁</a></li>\n</ul>\n</div>","excerpt":"요약 css 클래스 이름 짓는 방법론 특징 css 명시도 (specificiy)를 높여서 요소에 적용되는 스타일이 충돌하지 않도록 하는 css 아이디와 클래스를 naming하는 방법론이다 기본적으로 아이디는 사용하지 않고 클래스만 사용함 OOCSS, Atomic 등 다른 naming 방법론도 있는데 BEM이 그나마 복잡하지 않음 클래스를 Block(독립 적인 요소), Element(block을 구성하는 단위), Modifier로 구분함 일반적으로 적는 클래스 이름은 block element인 경우 block__element modifier인 경우 block__element—modifier 예. .header => block .header__navigation => element .header__navigation—navi-text => modifier 장,단점 장점: 모듈화 (클래스에 적용되는 css가 서로에게 영향을 주지 않음): block style이 다른 element 스타일…","frontmatter":{"date":"October 09, 2022","title":"CSS - BEM","categories":"WIL","author":"chanjook1m","emoji":"😊"},"fields":{"slug":"/css-bem/"}},"next":{"id":"612bff7e-2d74-572d-adc3-d494d95b63ec","html":"<h2 id=\"리액트에-대한-이해\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\" aria-label=\"리액트에 대한 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에 대한 이해</h2>\n<blockquote>\n<ul>\n<li>리액트 라이브러리는 왜 사용하는 걸까?</li>\n<li>라이브러리 선택에는 여러 가지 기준이 존재한다</li>\n<li>현재 문제에 가장 적합한 기준을 선택해야한다</li>\n<li>예를들어 공통적인 기준으로는 많은 사용자 수 => 대형 커뮤니티 => 낮은 버그 발생률 => 높은 새로운 기능 업데이트 수 가 있다</li>\n<li>다른 이유로는 성능 / 속도 / 가독성 등을 이유로 들 수 있다</li>\n</ul>\n</blockquote>\n<h2 id=\"jsx-javascript-xml\" style=\"position:relative;\"><a href=\"#jsx-javascript-xml\" aria-label=\"jsx javascript xml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX (Javascript XML)</h2>\n<blockquote>\n<ul>\n<li>Javascript에 XML을 추가한 확장한 문법이다  </li>\n<li>JSX는 공식적인 자바스크립트 문법이 아니라 바벨을 사용하여 일반 자바스크립트 형태의 코드로 transpiling 해주어야 한다</li>\n<li>html 어트리뷰트 이름 대신 camelCase 프로퍼티 명명 규칙 사용</li>\n<li>태그 content가 비어 있으면 /> 닫는 태그를 사용해야함</li>\n</ul>\n</blockquote>\n<h2 id=\"조건부-렌더링\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"조건부 렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 렌더링</h2>\n<blockquote>\n<ul>\n<li>return 문 내에서 if else 문을 사용하려면 삼항 연산자만 가능함\n<ul>\n<li>({condition} ? {result1} : {result2})</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>if문 은 &#x26;&#x26; 논리 연산자로 표현 -> falsy 한 표현식이 포함되면 falsy 표현식이 return되니 조심\n<ul>\n<li><code class=\"language-text\">{false} &amp;&amp; &lt;div>test&lt;/div> => false return됨</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"component--props\" style=\"position:relative;\"><a href=\"#component--props\" aria-label=\"component  props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>component &#x26; props</h2>\n<blockquote>\n<ul>\n<li>함수/클래스 컴포넌트 두가지 종류가 있음\n<ul>\n<li>클래스 컴포넌트에서는 hook 사용 불가능</li>\n</ul>\n</li>\n<li>props: 사용자 정의 컴포넌트에 값을 전달 (읽기 전용 = 수정 불가 = 순수함수 처럼 side effect 없이 사용)</li>\n<li>props.children: 컴포넌트의 여는 태그와 닫는 태그 사이의 내용 -> 요건 언제 사용? -> 사용자 정의 컴포넌트가 일반 html 태그와 비슷 할때 or 컴포넌트에 다른 컴포넌트를 전달할때</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>팁: props를 받는 컴포넌트에서 destruturing으로 props 요소를 사용하는 것이 가독성에 더 좋음 (방법1), props를 넘겨 주는 컴포넌트에서 객체를 destructuring 해서 넘겨주는 방법도 있음 (방법2)</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 방법1</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">받는컴포넌트</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>element1<span class=\"token punctuation\">,</span> element2<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 방법2</span>\r\n<span class=\"token operator\">&lt;</span>넘겨주는컴포넌트 states<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">{</span>obj<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"클래스형-컴포넌트\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"클래스형 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스형 컴포넌트</h2>\n<blockquote>\n<ul>\n<li>단점\n<ul>\n<li>컴포넌트 상태 관련 로직 재사용불가 (hook 사용불가)</li>\n<li>이해하기 어려운 컴포넌트 유발 -> 가독성 저하, 컴포넌트 분리 및 테스트가 어려움</li>\n<li>this가 무엇을 가리키는지 헷갈림</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"cra-create-react-app\" style=\"position:relative;\"><a href=\"#cra-create-react-app\" aria-label=\"cra create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cra (create-react-app)</h2>\n<blockquote>\n<ul>\n<li>webpack, babel을 자동 설정 해줌</li>\n<li>리액트 개발환경 설정 제공 + boiler plate code 제공</li>\n<li>디테일한 요구사항에 맞게 cra 설정 수정하기는 어렵고 복잡함</li>\n<li>cra 설지 과정\n<ul>\n<li>node.js 설치</li>\n<li>npx (패키지를 임시 설치 하는 용도) create-react-app {폴더명}</li>\n</ul>\n</li>\n<li>package.json\n<ul>\n<li>dependencies = 프로젝트에 필요한 패키지</li>\n<li>scripts = 스크립트를 실행할 명령어 (eject -> 모든 설정 값들이 밖으로 노출 -> cra 설정값을 변경할떄 사용, 이전 cra 구조로 되돌릴 수 없음)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state</h2>\n<blockquote>\n<ul>\n<li>컴포넌트 상태를 변경 후 자동 render가 되지 않을때 state를 사용</li>\n<li>함수 컴포넌트는 그냥 함수이다</li>\n<li>setState함수로 말고 state가 가리키는 값을 직접 변경하면 rerendering 발생하지 않음 (리액트에서는 얕은 비교로 주소값이 변하는지 감지 하기 때문)\n<ul>\n<li>원시타입 state는 setState로 변경,</li>\n<li>참조타입 state는 setState({…obj,변경사항})과 같이 destructuring으로 새로운 참조형 값을 넣은 후 변경</li>\n</ul>\n</li>\n<li>props, state 공통점: props를 넘겨받거나, state가 바뀌면 rerendering이됨</li>\n</ul>\n</blockquote>\n<h2 id=\"리액트-리렌더링\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81\" aria-label=\"리액트 리렌더링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 리렌더링</h2>\n<blockquote>\n<ul>\n<li>아래의 상황에서 리렌더링이 발생\n<ul>\n<li>state 값이 변경 됐을때</li>\n<li>props 값이 변경 됐을때</li>\n<li>부모 컴포넌트가 리랜더링 됐을때</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"비동기-setstate\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-setstate\" aria-label=\"비동기 setstate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 setState</h2>\n<blockquote>\n<ul>\n<li>한번에 setState함수를 여러개 처리하면 비동기적으로 처리되어 몇몇 setState 함수의 결과가 반영되지 않을 수 있음</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\r\n  <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 1번 setState가 비동기적으로 처리되기 때문에 2번 </span>\r\n<span class=\"token comment\">// setState만 처리되어 state 는 5라는 값을 가지게됨</span>\r\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n</code></pre></div>\n<blockquote>\n<ul>\n<li>setState parameter 에 함수를 넣고 함수의 parameter에 state를 넘겨서 처리하면 (비동기적으로 처리되는것은 마찬가지지만) 위의 setState 결과가 겹치는 부분을 해결가능</li>\n</ul>\n</blockquote>\n<h2 id=\"단방향-데이터-흐름\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\" aria-label=\"단방향 데이터 흐름 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단방향 데이터 흐름</h2>\n<blockquote>\n<ul>\n<li>보통 데이터는 top down으로 부모에서 자식으로 전달 되어야함</li>\n</ul>\n</blockquote>\n<h2 id=\"state-끌어-올리기\" style=\"position:relative;\"><a href=\"#state-%EB%81%8C%EC%96%B4-%EC%98%AC%EB%A6%AC%EA%B8%B0\" aria-label=\"state 끌어 올리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state 끌어 올리기</h2>\n<blockquote>\n<ul>\n<li>자식 컴포넌트 끼리 state를 교환하는 경우 부모한테 state를 올려서 이동 (single source of truth = 데이터를 한곳에서만 제어)</li>\n<li>부모 컴포넌트에서 useState를 사용해 state와 setState를 자식에게 넘겨주고 자식에서 변경이 일어나면 setState를 사용하도록함 다른 자식에게 업데이트된 내용을 넘겨 주기 위해 데이터를 가공하는 로직도 부모 컴포넌트에서 작성 필요</li>\n</ul>\n</blockquote>\n<h2 id=\"life-cycle과-useeffect\" style=\"position:relative;\"><a href=\"#life-cycle%EA%B3%BC-useeffect\" aria-label=\"life cycle과 useeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>life cycle과 useEffect</h2>\n<blockquote>\n<ul>\n<li>문제: 함수 컴포넌트일때 mount, unmount 됏을때만 실행되는 로직이 있을 수도 있음</li>\n<li>solution: hook = 상태값과 여러 react 기능을 사용가능 하게 해주는 함수들</li>\n<li>effect hook = useEffect({parameter1}, {parameter2}) (life cycle과 관련된 hook)\n<ul>\n<li>parameter2가 빈배열 = componentDidMount</li>\n<li>parameter2가 없으면 = componentDidMount + componentDidUpdate</li>\n<li>parameter2에 state를 넣은 배열을 넣으면(의존성 배열) = componentDidMount + state변경시 componentDidUpdate</li>\n<li>함수를 return하면 = componentDidUnMount (unmount될때 return 함수가 실행됨)</li>\n</ul>\n</li>\n<li>코드가 무엇을 하느냐에 따라 useEffect를 나누어서 여러번 사용가능 (가독성 향상)\n<ul>\n<li>예를들어 mount시 API를 불러올때 useEffect를 호출해 사용하고 unmount 될때 처리 되는 로직은 useEffect를 한번더 사용해 처리 가능</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"끝\" style=\"position:relative;\"><a href=\"#%EB%81%9D\" aria-label=\"끝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝</h1>\n<p>😊</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\">리액트에 대한 이해</a></li>\n<li><a href=\"#jsx-javascript-xml\">JSX (Javascript XML)</a></li>\n<li><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%A0%8C%EB%8D%94%EB%A7%81\">조건부 렌더링</a></li>\n<li><a href=\"#component--props\">component &#x26; props</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">클래스형 컴포넌트</a></li>\n<li><a href=\"#cra-create-react-app\">cra (create-react-app)</a></li>\n<li><a href=\"#state\">state</a></li>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81\">리액트 리렌더링</a></li>\n<li><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-setstate\">비동기 setState</a></li>\n<li><a href=\"#%EB%8B%A8%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\">단방향 데이터 흐름</a></li>\n<li><a href=\"#state-%EB%81%8C%EC%96%B4-%EC%98%AC%EB%A6%AC%EA%B8%B0\">state 끌어 올리기</a></li>\n<li><a href=\"#life-cycle%EA%B3%BC-useeffect\">life cycle과 useEffect</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 09, 2022","title":"React - basic part 1","categories":"WIL","author":"chanjook1m","emoji":"😊"},"fields":{"slug":"/react-basic-part1/"}},"prev":{"id":"5c922eff-ccab-5a2a-bdbb-10b8edaf3cd9","html":"<h2 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h2>\n<blockquote>\n<ul>\n<li>상태 변경을 실시간으로 알릴 수 있는 패턴</li>\n</ul>\n</blockquote>\n<h2 id=\"observer-패턴이란\" style=\"position:relative;\"><a href=\"#observer-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\" aria-label=\"observer 패턴이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Observer 패턴이란</h2>\n<blockquote>\n<ul>\n<li>subject (관찰 대상), observer (관찰자)가 존재</li>\n<li>관찰대상의 상태가 변경 된 경우 관찰자의 메소드를 호출 함으로써 상태 변경을 알려주는 패턴</li>\n</ul>\n</blockquote>\n<h2 id=\"로직\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%A7%81\" aria-label=\"로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로직</h2>\n<blockquote>\n<ul>\n<li>observer가 subject에 observer 리스트에 상태 변경 시 실행될 메소드를 등록한다 (observer 자체를 등록한 후 notify 시 해당 observer의 특정한 함수를 실행해도 된다)</li>\n<li>subject에서 상태가 변경된 후 observer 리스트에 등록된 모든 observer의 메소드를 호출해 상태 변경을 알린다</li>\n</ul>\n</blockquote>\n<h2 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// observer list</span>\r\n\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">registerObserver</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">observerMethod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">unregisterObserver</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">observerMethod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\r\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">registeredObserverMethod</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> registeredObserverMethod <span class=\"token operator\">!==</span> observerMethod<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">notifyObservers</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"끝\" style=\"position:relative;\"><a href=\"#%EB%81%9D\" aria-label=\"끝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝</h1>\n<blockquote>\n<ul>\n<li>옵저버 패턴을 응용한 패턴으로 pub/sub 패턴이 있는데 이 부분은 나중에 알아봐야겠다</li>\n</ul>\n</blockquote>\n<p>😊</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></li>\n<li><a href=\"#observer-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80\">Observer 패턴이란</a></li>\n<li><a href=\"#%EB%A1%9C%EC%A7%81\">로직</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></li>\n</ul>\n</div>","frontmatter":{"date":"October 16, 2022","title":"Pattern - Observer","categories":"WIL","author":"chanjook1m","emoji":"😊"},"fields":{"slug":"/pattern-observer/"}},"site":{"siteMetadata":{"siteUrl":"https://chanjook1m.github.io","comments":{"utterances":{"repo":"chanjook1m/chanjook1m.github.io"}}}}},"pageContext":{"slug":"/css-bem/","nextSlug":"/react-basic-part1/","prevSlug":"/pattern-observer/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}